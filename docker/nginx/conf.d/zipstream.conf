server {
    listen          80;
    server_name     'localhost';

    client_max_body_size 30M;
    #client_body_buffer_size 4k;

    location ~* ^/zipstream/(?P<path>.+)$ {
        # For development only.
        lua_code_cache off;

        # This required argument supplies the location of the upstream application.
        # It is expected to emit a list of files to be zipped.
        set $upstream /internal/upstream/$path;

        # This required argument supplies the URL at which raw files can be read.
        # In this example and indeed in most cases, the URL is probably
        # a private one exposing some file store. The paths provided in the list
        # of files will be fetched from this url (url+path). Use an IP address below.
        set $file_url http://127.0.0.1:80/internal/files;

        # Optional arguments with defaults...

        # This option controls the header name that engages zipstream module
        # If the header is not present or set to a value other than "zip",
        # zipstream will just proxy the response back to the client. In the future
        # (pull requests welcome) other values like "rar" or "cpio" might be supported :-).

        # set $header X-Archive-Files;  # This option

        # When doing I/O, what chunk size to use?

        # set $chunk_size 65535;

        # Would you like to control the name of the file in the Content-Disposition
        # header?

        # set $zipname multi.zip;

        # Controls what methods engage the zipstream module. Other HTTP methods will
        # simply be proxied.

        # set $methods GET POST;

        content_by_lua_file '/usr/local/openresty/lualib/nginx_lua_zipstream.lua';
    }

    # This is the location that corresponds to $file_url above. Zipstream will fetch
    # files from this location.
    location /internal/files {
        allow 127.0.0.1;
        deny all;

        alias /files;
    }

    # Helps test error handling.
    location = /internal/files/500 {
        return 500;
    }

    # This is the location that corresponds to $upstream above. Zipstream will do a
    # subrequest here to get the file list (or a response to proxy to client).
    location ~* ^/internal/upstream/(?P<path>.+)$ {
        internal;

        # This URL would most likely be your web application that wishes to send a
        # zip stream. It should emit the proper header and a file list.
        proxy_pass http://127.0.0.1/application/$path;
    }

    # This is just a stand-in for the backend application. It emits the required header
    # and list of files that engage zipstream.
    location /application {
        add_header X-Archive-Files zip;
        more_set_headers 'Content-Type: text/plain';
        return 200 '080934 8 /hello.txt test/Hello!.txt\n2323 23 /good%20bye.txt Good Bye.txt\n- - /f©®βàr¡.txt f©®βàr¡.txt\n- - /404 /404.txt\n- - /500 500.txt';
    }
}
